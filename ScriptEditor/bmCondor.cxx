/*=========================================================================

  Program:   BatchMake
  Module:    bmCondor.cxx
  Language:  C++
  Date:      $Date$
  Version:   $Revision$
  Copyright (c) 2005 Insight Consortium. All rights reserved.
  See ITKCopyright.txt or http://www.itk.org/HTML/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even 
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
     PURPOSE.  See the above copyright notices for more information.
=========================================================================*/

#include "bmCondor.h"
#include <stdio.h>
  
namespace bm {

/** Constructor */
Condor::Condor()
{
  m_FileName = "";
}

/** Destructor */
Condor::~Condor()
{
}

/** Add an application to the list of applications to generate */
void Condor::AddApplication(ApplicationWrapper* app)
{
  m_ApplicationsList.push_back(*app);
}

/** Write the condor script */
void Condor::Write()
{
  if(m_FileName.size() == 0)
    {
    std::cout << "Condor::Write() : Please set a filename" << std::endl;
    return;
    }
  FILE* fic = fopen(m_FileName.c_str(),"wb");
  
  if(!fic)
    {
    std::cout << "Condor::Write() : Cannot create condor script" << std::endl;
    return;
    }
  
  // Write the header
  fprintf(fic,"# Script generated by BatchMake (c) InsightSoftwareConsortium\n");
  fprintf(fic,"# CADDLab @ UNC Chapel Hill 2004-2005\n");
  fprintf(fic,"# More information at: http://caddlab.rad.unc.edu\n");
  
  fprintf(fic,"universe       = vanilla\n");
  fprintf(fic,"output         = bmCondor.out.txt\n");             
  fprintf(fic,"error          = bmCondor.error.txt\n");            
  fprintf(fic,"log            = bmCondor.log.txt\n");
  
  // Add the executable
  std::vector<ApplicationWrapper>::iterator it = m_ApplicationsList.begin();
  while(it != m_ApplicationsList.end())
    {
    fprintf(fic,"executable    = %s\n",(*it).GetApplicationPath().toChar());
    fprintf(fic,"arguments     = %s\n",(*it).GetCurrentCommandLineArguments(true).c_str());  
    
#ifdef WIN32 
    fprintf(fic,"requirements  = (OpSys == \"WINNT50\") || (OpSys == \"WINNT51\") \n");
#endif

    // Check if we have external data
    const std::vector<ApplicationWrapperParam> & params = (*it).GetParams();
    std::vector<ApplicationWrapperParam>::const_iterator itParams = params.begin();

    std::string externalData = "";
    while(itParams != params.end())
      {
      if((*itParams).GetExternalData())
        {
        if(externalData.size()>0)
          {
          externalData += ",";
          }
        externalData += (*itParams).GetValue().toChar();
        }
      itParams++;
      }

    if(externalData.size() > 0)
      {
      fprintf(fic,"should_transfer_files = yes\n");
      fprintf(fic,"transfer_input_files = %s\n",externalData.c_str());
      fprintf(fic,"when_to_transfer_output = ON_EXIT_OR_EVICT\n");
      }

    fprintf(fic,"queue 1\n");
    it++;
    }
  fclose(fic);
}

} // end namespace bm
